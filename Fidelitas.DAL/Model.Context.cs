//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fidelitas.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AutomovilE : DbContext
    {
        public AutomovilE()
            : base("name=AutomovilE")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Automovil> Automovil { get; set; }
    
        public virtual int sp_DAutomovil(Nullable<int> iID)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DAutomovil", iIDParameter);
        }
    
        public virtual int sp_Ejemplo(Nullable<int> iID)
        {
            var iIDParameter = iID.HasValue ?
                new ObjectParameter("iID", iID) :
                new ObjectParameter("iID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Ejemplo", iIDParameter);
        }
    
        public virtual int sp_IAutomovil(string vNombre, Nullable<int> iEstilo, Nullable<bool> iCilindraje, Nullable<int> iCosto, Nullable<int> vTransmision, Nullable<int> iCantidadPuertas, Nullable<int> iAno, string vNombreMarca)
        {
            var vNombreParameter = vNombre != null ?
                new ObjectParameter("vNombre", vNombre) :
                new ObjectParameter("vNombre", typeof(string));
    
            var iEstiloParameter = iEstilo.HasValue ?
                new ObjectParameter("iEstilo", iEstilo) :
                new ObjectParameter("iEstilo", typeof(int));
    
            var iCilindrajeParameter = iCilindraje.HasValue ?
                new ObjectParameter("iCilindraje", iCilindraje) :
                new ObjectParameter("iCilindraje", typeof(bool));
    
            var iCostoParameter = iCosto.HasValue ?
                new ObjectParameter("iCosto", iCosto) :
                new ObjectParameter("iCosto", typeof(int));
    
            var vTransmisionParameter = vTransmision.HasValue ?
                new ObjectParameter("vTransmision", vTransmision) :
                new ObjectParameter("vTransmision", typeof(int));
    
            var iCantidadPuertasParameter = iCantidadPuertas.HasValue ?
                new ObjectParameter("iCantidadPuertas", iCantidadPuertas) :
                new ObjectParameter("iCantidadPuertas", typeof(int));
    
            var iAnoParameter = iAno.HasValue ?
                new ObjectParameter("iAno", iAno) :
                new ObjectParameter("iAno", typeof(int));
    
            var vNombreMarcaParameter = vNombreMarca != null ?
                new ObjectParameter("vNombreMarca", vNombreMarca) :
                new ObjectParameter("vNombreMarca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IAutomovil", vNombreParameter, iEstiloParameter, iCilindrajeParameter, iCostoParameter, vTransmisionParameter, iCantidadPuertasParameter, iAnoParameter, vNombreMarcaParameter);
        }
    
        public virtual ObjectResult<sp_SAutomovil_Result> sp_SAutomovil()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SAutomovil_Result>("sp_SAutomovil");
        }
    
        public virtual int sp_UAutomovil(Nullable<int> iId, string vNombre, Nullable<int> iEstilo, Nullable<bool> iCilindraje, Nullable<int> iCosto, Nullable<int> vTransmision, Nullable<int> iCantidadPuertas, Nullable<int> iAno, string vNombreMarca)
        {
            var iIdParameter = iId.HasValue ?
                new ObjectParameter("iId", iId) :
                new ObjectParameter("iId", typeof(int));
    
            var vNombreParameter = vNombre != null ?
                new ObjectParameter("vNombre", vNombre) :
                new ObjectParameter("vNombre", typeof(string));
    
            var iEstiloParameter = iEstilo.HasValue ?
                new ObjectParameter("iEstilo", iEstilo) :
                new ObjectParameter("iEstilo", typeof(int));
    
            var iCilindrajeParameter = iCilindraje.HasValue ?
                new ObjectParameter("iCilindraje", iCilindraje) :
                new ObjectParameter("iCilindraje", typeof(bool));
    
            var iCostoParameter = iCosto.HasValue ?
                new ObjectParameter("iCosto", iCosto) :
                new ObjectParameter("iCosto", typeof(int));
    
            var vTransmisionParameter = vTransmision.HasValue ?
                new ObjectParameter("vTransmision", vTransmision) :
                new ObjectParameter("vTransmision", typeof(int));
    
            var iCantidadPuertasParameter = iCantidadPuertas.HasValue ?
                new ObjectParameter("iCantidadPuertas", iCantidadPuertas) :
                new ObjectParameter("iCantidadPuertas", typeof(int));
    
            var iAnoParameter = iAno.HasValue ?
                new ObjectParameter("iAno", iAno) :
                new ObjectParameter("iAno", typeof(int));
    
            var vNombreMarcaParameter = vNombreMarca != null ?
                new ObjectParameter("vNombreMarca", vNombreMarca) :
                new ObjectParameter("vNombreMarca", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UAutomovil", iIdParameter, vNombreParameter, iEstiloParameter, iCilindrajeParameter, iCostoParameter, vTransmisionParameter, iCantidadPuertasParameter, iAnoParameter, vNombreMarcaParameter);
        }
    }
}
